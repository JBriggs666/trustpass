{"version":3,"sources":["tr-trustpass.js"],"names":["trTrustpass","$compile","link","scope","element","attrs","ngModel","transclude","validatePasswordStrength","password","checklist","test","tests","options","hasOwnProperty","isAllValid","checkIsAllValid","$setValidity","flag","angular","extend","lowercase","uppercase","number","special","minimum","maximum","word","toggle","minlength","maxlength","message","ngMaxlength","ngMinlength","p","length","$parsers","unshift","$watch","$render","$viewValue","val","bind","event","$apply","$setViewValue","target","value","isVisible","template","parentNode","insertBefore","nextSibling","restrict","require","module","directive","$inject"],"mappings":"CAAA,WACE,YAcA,SAASA,GAAYC,GAYnB,QAASC,GAAKC,EAAOC,EAASC,EAAOC,EAASC,GAiH5C,QAASC,GAAyBC,GAChC,GAAIC,KAGJ,KAAI,GAAIC,KAAQC,GAEXT,EAAMU,QAAQF,MAAU,IAEzBD,EAAUC,GAAQC,EAAME,eAAeH,GAAQC,EAAMD,GAAMF,IAAY,EAQ3E,OAJAN,GAAMO,UAAYA,EAClBP,EAAMY,WAAaC,EAAgBN,GACnCJ,EAAQW,aAAa,YAAad,EAAMY,YAEjCN,EAST,QAASO,GAAgBN,GACvB,IAAI,GAAIQ,KAAQR,GAEd,GAAGA,EAAUQ,MAAU,EACrB,OAAO,CAGX,QAAO,EA/ITf,EAAMY,YAAa,EACnBZ,EAAMO,aAGNP,EAAMU,QAAUM,QAAQC,QAItBC,WAAW,EACXC,WAAW,EACXC,QAAQ,EACRC,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,MAAM,EAGNC,QAAQ,EACRC,UAAW,EACXC,UAAW,EACXC,QAAS,mDACR5B,EAAMH,cAKNK,EAAM2B,aAAe3B,EAAMyB,aAC5B3B,EAAMU,QAAQiB,UAAYzB,EAAM2B,aAAe3B,EAAMyB,YAEpDzB,EAAM4B,aAAe5B,EAAMwB,aAC5B1B,EAAMU,QAAQgB,UAAYxB,EAAM4B,aAAe5B,EAAMwB,UAQvD,IAAIjB,IACFe,KAAW,SAASO,GAAK,MAAOA,IAAK,OAAOvB,KAAKuB,IAAK,GAAO,GAC7Db,UAAW,SAASa,GAAK,MAAOA,IAAK,QAAQvB,KAAKuB,IAAK,GAAO,GAC9DZ,UAAW,SAASY,GAAK,MAAOA,IAAK,QAAQvB,KAAKuB,IAAK,GAAO,GAC9DX,OAAW,SAASW,GAAK,MAAOA,IAAK,KAAKvB,KAAKuB,IAAK,GAAO,GAC3DV,QAAW,SAASU,GAAK,MAAOA,IAAK,QAAQvB,KAAKuB,IAAK,GAAO,GAC9DT,QAAW,SAASS,GAAK,MAAOA,IAAKA,EAAEC,QAAUhC,EAAMU,QAAQgB,WAAY,GAAO,GAClFH,QAAW,SAASQ,GAAK,MAAOA,IAAKA,EAAEC,QAAUhC,EAAMU,QAAQiB,WAAY,GAAO,GAKpFxB,GAAQ8B,SAASC,QAAQ7B,GAGzBL,EAAMmC,OAAO,QAAS9B,GAGtBF,EAAQiC,QAAU,WACbjC,EAAQkC,YACTpC,EAAQqC,IAAInC,EAAQkC,aAIxBpC,EAAQsC,KAAK,QAAS,SAASC,GAC7BxC,EAAMyC,OAAO,WACXtC,EAAQuC,cAAcF,EAAMG,OAAOC,WAKvC5C,EAAM6C,WAAa7C,EAAMU,QAAQe,OAC9BzB,EAAMU,QAAQe,SACfzB,EAAM6C,WAAY,EAClB5C,EACCsC,KAAK,QAAS,WACbvC,EAAM6C,WAAY,EAClB7C,EAAMyC,WAEPF,KAAK,OAAQ,WACZvC,EAAM6C,WAAY,EAClB7C,EAAMyC,WAQV,IAAIK,GAAW9B,QAAQf,QACrB,qyCAaFA,GAAQ,GAAG8C,WAAWC,aAAaF,EAAS,GAAI7C,EAAQ,GAAGgD,aAC3DnD,EAASgD,GAAU9C,GAlHrB,OACEkD,SAAU,IACVC,QAAS,UACTnD,OACE4C,MAAO,WACP/C,YAAa,gBAEfE,KAAMA,GAfViB,QACGoC,OAAO,kBACPC,UAAU,cAAexD,GAE5BA,EAAYyD,SAAW","file":"tr-trustpass.min.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   * @ngdoc directive\n   * @name trTrustPass.directive:trTrustPass\n   * @description\n   * Checklist validator for password strength.\n   */\n  angular\n    .module('trTrustpass', [])\n    .directive('trTrustpass', trTrustpass);\n\n  trTrustpass.$inject = ['$compile'];\n\n  function trTrustpass($compile) {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      scope: {\n        value: '=ngModel',\n        trTrustpass: '=trTrustpass'\n      },\n      link: link\n    };\n\n    function link(scope, element, attrs, ngModel, transclude) {\n\n      scope.isAllValid = false;\n      scope.checklist = {};\n\n      // Extend our default options with user provided options\n      scope.options = angular.extend({\n\n        // Tests\n        // \"A word character\": a character from a-z, A-Z, 0-9, including the _ (underscore) character.\n        lowercase: true, // Find a-z\n        uppercase: true, // Find A-Z\n        number: true, // Find 0-9\n        special: true, // Find a non-word character or the _ (underscore) character\n        minimum: true, // Check minimum length\n        maximum: false, // Check maximum length\n        word: false, // Find a word character\n\n        // Settings\n        toggle: false,\n        minlength: 8,\n        maxlength: 1,\n        message: 'Your password is secure and you are good to go!',\n      }, scope.trTrustpass);\n\n      /**\n       * Override options with min/maxlength attributes (either native HTML)\n       */\n      if(attrs.ngMaxlength || attrs.maxlength) {\n        scope.options.maxlength = attrs.ngMaxlength || attrs.maxlength;\n      }\n      if(attrs.ngMinlength || attrs.minlength) {\n        scope.options.minlength = attrs.ngMinlength || attrs.minlength;\n      }\n\n      /**\n       * Available tests to run\n       * Tests should return true or false\n       * Should test at least for one character occurance\n       */\n      var tests = {\n        word:      function(p) { return p && /[\\w]/.test(p) ? true : false; },\n        lowercase: function(p) { return p && /[a-z]/.test(p) ? true : false; },\n        uppercase: function(p) { return p && /[A-Z]/.test(p) ? true : false; },\n        number:    function(p) { return p && /\\d/.test(p) ? true : false; },\n        special:   function(p) { return p && /[_\\W]/.test(p) ? true : false; },\n        minimum:   function(p) { return p && p.length >= scope.options.minlength ? true : false; },\n        maximum:   function(p) { return p && p.length <= scope.options.maxlength ? true : false; },\n      };\n\n\n      // Add our custom parser into model's $parsers\n      ngModel.$parsers.unshift(validatePasswordStrength);\n\n      // Watch for changes in value\n      scope.$watch('value', validatePasswordStrength);\n\n      // Update the passport field whenever the value on the scope changes from outside\n      ngModel.$render = function() {\n        if(ngModel.$viewValue) {\n          element.val(ngModel.$viewValue);\n        }\n      };\n\n      element.bind('input', function(event) {\n        scope.$apply(function() {\n          ngModel.$setViewValue(event.target.value);\n        });\n      });\n\n      // If toggling is in use, toggle on element focus\n      scope.isVisible = !scope.options.toggle;\n      if(scope.options.toggle) {\n        scope.isVisible = false;\n        element\n        .bind('focus', function() {\n          scope.isVisible = true;\n          scope.$apply();\n        })\n        .bind('blur', function() {\n          scope.isVisible = false;\n          scope.$apply();\n        });\n      }\n\n      /**\n       * Append the template below input\n       * This could be done with\n       */\n      var template = angular.element(\n        '<section class=\"trustpass\" ng-show=\"isVisible\">' +\n          '<ul class=\"trustpass-checklist\" ng-show=\"isVisible && !isAllValid\">' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.word,      \\'trustpass-yep\\': checklist.word      }\" ng-if=\"options.word\">Alphanumeric characters</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.lowercase, \\'trustpass-yep\\': checklist.lowercase }\" ng-if=\"options.lowercase\">One lowercase character</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.uppercase, \\'trustpass-yep\\': checklist.uppercase }\" ng-if=\"options.uppercase\">One uppercase character</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.number,    \\'trustpass-yep\\': checklist.number    }\" ng-if=\"options.number\">One number</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.special,   \\'trustpass-yep\\': checklist.special   }\" ng-if=\"options.special\">One special character</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.minimum,   \\'trustpass-yep\\': checklist.minimum   }\" ng-if=\"options.minimum\">{{ ::options.minlength }} characters minimum</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.maximum,   \\'trustpass-yep\\': checklist.maximum   }\" ng-if=\"options.maximum\">{{ ::options.maxlength }} characters maximum</li>' +\n          '</ul>' +\n          '<div class=\"trustpass-done\" ng-show=\"isVisible && isAllValid\" ng-bind=\"options.message\"></div>' +\n        '</section>');\n      // This would be jQuery's contentTr.insertAfter(element); ...but we don't want to depend on jQuery here.\n      element[0].parentNode.insertBefore(template[0], element[0].nextSibling);\n      $compile(template)(scope);\n\n      /**\n       * Run validators for a string\n       * It's absolutely vital this returns the original string for ngModel.$parsers\n       *\n       * @param String password\n       * @return String\n       */\n      function validatePasswordStrength(password) {\n        var checklist = {};\n\n        // Loop trough possible tests\n        for(var test in tests) {\n          // Is test enabled?\n          if(scope.options[test] === true) {\n            // Run test (but only if we have a password string)\n            checklist[test] = tests.hasOwnProperty(test) ? tests[test](password) : false;\n          }\n        }\n\n        scope.checklist = checklist;\n        scope.isAllValid = checkIsAllValid(checklist);\n        ngModel.$setValidity('trustpass', scope.isAllValid);\n\n        return password;\n      }\n\n      /**\n       * Determine if all required tests pass\n       *\n       * @param Object checklist\n       * @return Boolean\n       */\n      function checkIsAllValid(checklist) {\n        for(var flag in checklist) {\n          // Check if the test is supposed to be validated and if the test fails\n          if(checklist[flag] === false) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n    }\n\n  }\n\n})();\n"],"sourceRoot":"/source/"}